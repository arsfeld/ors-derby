{
  "author": {
    "name": "James Nelson",
    "email": "james@numbat.com.au"
  },
  "name": "derby-i18n",
  "description": "simple i18n support for derby",
  "version": "0.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/jamesknelson/derby-i18n.git"
  },
  "private": false,
  "main": "lib/index",
  "directories": {
    "lib": "lib"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "derby": ">= 0.3.13"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "i18n",
    "derby"
  ],
  "license": "BSD",
  "readme": "<h1>derby-i18n</h1>\n<p>Simple filesystem-based i18n support for <a href=\"http://derbyjs.com\">derby</a>, a node.js MVC framework. It is planned to support interpolation and plurals in the near future.\n\n</p>\n<h2>Getting Started</h2>\n<h4>Install in your app directory</h4>\n<p><code>npm install derby-i18n</code>\n\n</p>\n<h4>Add locale files</h4>\n<p>By default, derby-i18n looks for locales in <code>locales/[language-code]/[app-name].json</code>.\nFor example, if you have an app called &quot;blog&quot;, and your app supports english, you&#39;ll\nhave locale files at <code>locales/en/blog.json</code>. Heres a sample blog.json file to get you started:\n\n</p>\n<pre><code class=\"lang-javascript\">{\n    &quot;title&quot;: &quot;JKN&quot;\n    &quot;article&quot;: {\n        &quot;published_on&quot;: &quot;Published on the&quot;,\n        &quot;meta&quot;: &quot;Read more and comment&quot;\n    }\n}</code></pre>\n<h4>Localize your app object</h4>\n<p>In your app.js, you&#39;ll need to call derby-i18n&#39;s <code>localize</code> method on your app:\n\n</p>\n<pre><code class=\"lang-javascript\">var derby = require(&#39;derby&#39;),\n    i18n = require(&#39;derby-i18n&#39;),\n    app = i18n.localize(derby.createApp(module), {\n        availableLocales: [&#39;en&#39;, &#39;ja&#39;],\n          urlScheme: &#39;path&#39;\n    });</code></pre>\n<p>There are a number of options available for localize, but if you don&#39;t pass it any\noptions it will assume you just want English. This is really simple way to build\nin support for other languages from the beginning!\n\n</p>\n<h4>Localize your views</h4>\n<p>derby-i18n adds a few view helpers for you to use, including:\n\n</p>\n<ul>\n<li><p><code>t(key)</code></p>\n<p>Returns the translation for the given key. For example, to display the published_on\nkey in the above locale file, you would do <code>{{t(&quot;article.published_on&quot;)}}</code>.</p>\n<p>Support is planned for pluralization and interpolation in the near future.</p>\n</li>\n<li><p><code>localizedPath(path)</code></p>\n<p>If using the <code>path</code> urlScheme, this will return the given path with <code>/[locale]/</code> prepended to it - for example <code>/en/</code> for the English locale. If not using the <code>path</code> urlScheme, nothing happens. This is useful for making sure your URLs are always pointing at the correct language.</p>\n</li>\n</ul>\n<p>derby-i18n also sets an <code>_i18n</code> field on your model:\n\n</p>\n<pre><code>model.set(&#39;_i18n&#39;, {\n    locale: locale,\n    language: language,\n    region: region,\n    namespace: o.ns\n});</code></pre>\n<p>The locale attribute includes the region if it is supported, otherwise just the language. The namespace is just the name of your app (<code>blog</code> in the above example).\n\n\n</p>\n<h2>Options</h2>\n<p>Configuration is accomplished by passing options to the localize call which wraps your app. The available options include:\n\n</p>\n<ul>\n<li><p><code>urlScheme</code></p>\n<p>Currently, the only supported options are <code>&quot;path&quot;</code> and <code>false</code>. Support for <code>&quot;domain&quot;</code> is also planned.</p>\n<p>When set to <code>&quot;path&quot;</code>, the first place to look for a locale is the first part of the current URL. For example, if the URL is <code>/ja/ongaku/capsule</code>, then your locale will be <code>ja</code>. Regions are also supported, for example <code>/en-US</code>.</p>\n<p>When set to <code>false</code>, URLs will be ignored as a source of locale information.</p>\n</li>\n<li><p><code>availableLocales</code></p>\n<p>An array containing the available locales for your app. Defaults to <code>[&quot;en&quot;]</code>.</p>\n<p>This should mirror the locales available in your <code>/locales</code> directory. If a locale is requested in a URL and isn&#39;t in this list, a 404 exception will be thrown.</p>\n</li>\n<li><p><code>checkHeader</code></p>\n<p>If <code>true</code>, the http accept-language header will be checked for a locale in the case that one isn&#39;t available in the URL. If the language-region combination is available, that will be used. Failing that, if a locale is defined for the same language without a region attached, that will be used. Otherwise the default locale is used.</p>\n</li>\n<li><p><code>defaultLocale</code></p>\n<p>The locale which will be chosen if one can&#39;t be found in the URL or headers. Defaults to the first locale in the <code>availableLocales</code> option.</p>\n</li>\n<li><p><code>forceScheme</code></p>\n<p>When <code>urlScheme</code> is <code>&quot;path&quot;</code>, URLs which don&#39;t match this regex will have the locale\nprepended to the URL in a redirect. URLs which do match it and don&#39;t contain a locale will 404. By default, matches everything over than <code>/</code>.</p>\n</li>\n<li><p><code>backend</code></p>\n<p>Defaults to a filesystem backend, but it should be possible to create others, like one based on the MongoDB store.</p>\n</li>\n</ul>\n<h2>Credits</h2>\n<ul>\n<li>Nate Smith and Brian Noguchi6 - creators of <a href=\"http://derbyjs.com\">derby</a></li>\n<li><a href=\"https://github.com/jamuhl\">Jan MÃ¼hlemann</a>, creator of <a href=\"http://i18next.com\">i18next</a> (which derby-i18n has borrowed from in places)</li>\n</ul>\n",
  "readmeFilename": "README.html",
  "_id": "derby-i18n@0.0.1",
  "dist": {
    "shasum": "80329d46982cf4415ef2b7d7ac048d9e5c85dccd"
  },
  "_from": "derby-i18n@*"
}
